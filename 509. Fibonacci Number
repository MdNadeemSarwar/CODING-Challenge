//Recursion ke through
class Solution {
public:
    int fib(int n) {
        if(n==0 || n==1){
            return n;
        }
        int ans = fib(n-1) + fib(n-2);
        return ans;
    }
};

--------------------------------------------------------------
class Solution {
public:
    int fib(int n) {
      int prev1 = 0;
      int prev2 = 1;
      for(int i=2; i<=n; i++){
        int curr = prev1 + prev2;
        prev1 = prev2;
        prev2 = curr;
      }
      if(n==0){
        return 0;
      }
      if(n==1){
        return 1;
      }
      return prev2;  
    }
};
------------------------------------------------------------------------
// Recursion + Memoaization 
class Solution {
public:
    int fib(int n) {
        vector<int>dp(n+1,-1);
        if(n==0 || n==1){
            return n;
        }

        if(dp[n] != -1){
            return dp[n];
        }

        dp[n] = fib(n-1) + fib(n-2);
        return dp[n];
    }
};
-------------------------------------------------------------------------
//Tabulaization Method
class Solution {
public:
    int fib(int n) {
        vector<int>dp(n+1);

        dp[0]=0;
        dp[1]=1;
        
        for(int i=2; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};
----------------------------------------------------------------------------------
// Space Optimization 
class Solution {
public:
    int fib(int n) {
        vector<int>dp(n+1);

        dp[0]=0;
        dp[1]=1;
        
        for(int i=2; i<=n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};
